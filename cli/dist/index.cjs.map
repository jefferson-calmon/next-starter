{"version":3,"sources":["../node_modules/commander/lib/error.js","../node_modules/commander/lib/argument.js","../node_modules/commander/lib/help.js","../node_modules/commander/lib/option.js","../node_modules/commander/lib/suggestSimilar.js","../node_modules/commander/lib/command.js","../node_modules/commander/index.js","../node_modules/commander/esm.mjs","../commands/create.ts","../helpers/create.helpers.ts","../utils/index.ts","../index.ts"],"sourcesContent":["/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(\n          fullText,\n          helpWidth - itemIndentWidth,\n          termWidth + itemSeparatorWidth,\n        );\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.wrap(commandDescription, helpWidth, 0),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(\n        helper.argumentTerm(argument),\n        helper.argumentDescription(argument),\n      );\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(\n        helper.optionTerm(option),\n        helper.optionDescription(option),\n      );\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return formatItem(\n            helper.optionTerm(option),\n            helper.optionDescription(option),\n          );\n        });\n      if (globalOptionList.length > 0) {\n        output = output.concat([\n          'Global Options:',\n          formatList(globalOptionList),\n          '',\n        ]);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(\n        helper.subcommandTerm(cmd),\n        helper.subcommandDescription(cmd),\n      );\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents =\n      ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(\n      `\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`,\n      'g',\n    );\n    const lines = columnText.match(regex) || [];\n    return (\n      leadingStr +\n      lines\n        .map((line, i) => {\n          if (line === '\\n') return ''; // preserve empty lines\n          return (i > 0 ? indentString : '') + line.trimEnd();\n        })\n        .join('\\n')\n    );\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1]))\n    shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      return this;\n    }\n\n    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = enableOrNameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} argv\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth =\n        contextOptions && contextOptions.error\n          ? this._outputConfiguration.getErrHelpWidth()\n          : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', context),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      if (flags) {\n        this._helpOption = this._helpOption ?? undefined; // preserve existing option\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    flags = flags ?? '-h, --help';\n    description = description ?? 'display help for command';\n    this._helpOption = this.createOption(flags, description);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = commander;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { z } from 'zod';\n\nimport * as H from '../helpers/create.helpers.ts';\n\nexport const CreateSchema = z.tuple([\n\tz.enum(['model', 'component', 'context']),\n\tz.string(),\n\tz.object({}),\n\tz.object({}).optional(),\n]);\n\nexport async function create(...args: any[]) {\n\tconst [item, name] = CreateSchema.parse(args);\n\n\tconst files = H.getFiles(item, name);\n\n\tconsole.log(files);\n}\n","import path from 'path';\nimport { z } from 'zod';\n\nimport { capitalize } from '../utils/index.ts';\nimport { CreateSchema } from '../commands/create.ts';\n\ntype Item = z.infer<typeof CreateSchema>[0];\n\ninterface ItemFile {\n\tname: string;\n\tdir: string;\n\tcontent: string;\n}\n\nexport function getFiles(item: Item, itemName: string) {\n\titemName = normalizeItemName(itemName);\n\n\tconst files: ItemFile[] = [];\n\n\tif (item === 'model') {\n\t\tfiles.push({\n\t\t\tname: [itemName, '.ts'].join(''),\n\t\t\tdir: path.join(path.dirname(''), 'src', 'models'),\n\t\t\tcontent: '',\n\t\t});\n\t}\n\n\tif (item === 'component') {\n\t\tfiles.push({\n\t\t\tname: ['index', '.tsx'].join(''),\n\t\t\tdir: path.join(path.dirname(''), 'src', 'components', itemName),\n\t\t\tcontent: '',\n\t\t});\n\n\t\tfiles.push({\n\t\t\tname: ['styles', '.ts'].join(''),\n\t\t\tdir: path.join(path.dirname(''), 'src', 'components', itemName),\n\t\t\tcontent: '',\n\t\t});\n\t}\n\n\tif (item === 'context') {\n\t\tfiles.push({\n\t\t\tname: [itemName, 'Context', '.ts'].join(''),\n\t\t\tdir: path.join(path.dirname(''), 'src', 'contexts'),\n\t\t\tcontent: '',\n\t\t});\n\t}\n\n\treturn files;\n}\n\nfunction normalizeItemName(name: string) {\n\treturn name.split(' ').map(capitalize).join(' ');\n}\n","export function capitalize(value: string) {\n\treturn value.charAt(0).toUpperCase() + value.slice(1);\n}\n","#! /usr/bin/env node\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { Command } from 'commander';\n\n// import pkg from '../package.json' assert { type: 'json' };\nimport { create } from './commands/create.ts';\n\nconst program = new Command();\n\nconsole.log('');\n\nprogram\n\t.version('', '-v, --version', 'Exibir a versão atual do app')\n\t.name('app')\n\t.description(\n\t\t'CLI feita para automatizar tarefas repetitivas dentro do app'\n\t);\n\nprogram.command('create <item> <name>').action(create);\n\nprogram.parse(process.argv);\n"],"mappings":"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","names":["require_error","__commonJSMin","exports","CommanderError","exitCode","code","message","InvalidArgumentError","require_argument","__commonJSMin","exports","InvalidArgumentError","Argument","name","description","value","previous","fn","values","arg","humanReadableArgName","nameOutput","require_help","__commonJSMin","exports","humanReadableArgName","Help","cmd","visibleCommands","helpCommand","a","b","getSortKey","option","visibleOptions","helpOption","removeShort","removeLong","globalOptions","ancestorCmd","argument","args","arg","helper","max","command","cmdName","ancestorCmdNames","extraInfo","choice","extraDescripton","termWidth","helpWidth","itemIndentWidth","itemSeparatorWidth","formatItem","term","description","fullText","formatList","textArray","output","commandDescription","argumentList","optionList","globalOptionList","commandList","str","width","indent","minColumnWidth","indents","manualIndent","columnWidth","leadingStr","columnText","indentString","breaks","regex","lines","line","i","require_option","__commonJSMin","exports","InvalidArgumentError","Option","flags","description","optionFlags","splitOptionFlags","value","arg","names","impliedOptionValues","newImplied","name","fn","mandatory","hide","previous","values","camelcase","DualOptions","options","option","key","optionKey","preset","negativeValue","str","word","shortFlag","longFlag","flagParts","require_suggestSimilar","__commonJSMin","exports","editDistance","b","d","j","i","cost","suggestSimilar","word","candidates","searchingOptions","candidate","similar","bestDistance","minSimilarity","distance","length","a","require_command","__commonJSMin","exports","EventEmitter","childProcess","path","fs","process","Argument","humanReadableArgName","CommanderError","Help","Option","DualOptions","suggestSimilar","Command","_Command","name","str","write","sourceCommand","result","command","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","args","cmd","configuration","displayHelp","displaySuggestion","description","fn","defaultValue","argument","names","detail","previousArgument","enableOrNameAndArgs","helpName","helpArgs","helpDescription","helpCommand","deprecatedDescription","event","listener","allowedValues","err","exitCode","code","message","expectedArgsCount","actionArgs","flags","target","value","previous","invalidArgumentMessage","option","matchingOption","matchingFlag","knownBy","alreadyUsed","existingCmd","newCmd","oname","positiveLongFlag","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","config","regex","def","m","parseArg","combine","allowUnknown","allowExcess","positional","passThrough","storeAsProperties","key","source","argv","parseOptions","execArgv","userArgs","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","foundExt","ext","executableFile","executableDir","resolvedScriptPath","localFile","legacyName","proc","incrementNodeInspectorPort","signal","exitCallback","executableDirMessage","executableMissing","wrappedError","commandName","operands","unknown","subCommand","promiseChain","subcommandName","arg","i","myParseArg","parsedValue","processedArgs","declaredArg","index","processed","v","promise","hooks","hookedCommand","callback","hookDetail","hook","parsed","checkForUnknownOptions","commandEvent","anOption","definedNonDefaultOptions","optionKey","conflictingAndDefined","defined","dest","maybeOption","activeVariadicOption","len","combinedOptions","errorOptions","dualHelper","hasCustomOptionValue","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","positiveOption","getErrorMessage","bestOption","flag","suggestion","candidateFlags","moreFlags","receivedArgs","expected","s","unknownName","candidateNames","versionOption","argsDescription","alias","matchingCommand","aliases","filename","contextOptions","helper","context","deprecatedCallback","helpInformation","position","text","helpEvent","helpStr","helpOption","debugOption","debugHost","debugPort","match","require_commander","__commonJSMin","exports","Argument","Command","CommanderError","InvalidArgumentError","Help","Option","name","flags","description","import_index","program","createCommand","createArgument","createOption","CommanderError","InvalidArgumentError","InvalidOptionArgumentError","Command","Argument","Option","Help","commander","import_zod","import_path","capitalize","value","getFiles","item","itemName","normalizeItemName","files","path","name","capitalize","CreateSchema","create","args","item","name","files","getFiles","program","Command","create"]}